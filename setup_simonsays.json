{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "Bucket": {
      "Default": "simonsaysresourcebucket",
      "Type": "String",
      "Description": "The bucket name that the bot uses"
    },
    "PhoneNumber": {
      "Type": "String",
      "Default": "+31612345678"
    }
  },
  "Description": "Stack for the deployment of the SimonSays project",
  "Resources": {
    "SimonSaysDeployerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AdministratorAccess"
        ],
        "Policies": [
          {
            "PolicyName": "SimonSaysDeployerRolePolicy1",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "*",
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "SimonSaysConversationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "SimonSaysConversationRolePolicy0",
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "lambda:InvokeFunction",
                    "logs:*",
                    "dynamodb:GetItem",
                    "lex:GetSlotType"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "SimonSaysConversation": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": { "Ref" : "Bucket"},
          "S3Key": "SimonSaysConversationFunction.zip"
        },
        "FunctionName": "SimonSaysConversation",
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "Handler": "lambda_function.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "SimonSaysConversationRole",
            "Arn"
          ]
        },
        "Timeout": 30,
        "Runtime": "python3.6"
      }
    },
    "SimonSaysDeployer": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": { "Ref" : "Bucket"},
          "S3Key": "SimonSaysDeployerFunction.zip"
        },
        "FunctionName": "SimonSaysDeployer",
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "Handler": "lambda_function.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "SimonSaysDeployerRole",
            "Arn"
          ]
        },
        "Timeout": 600,
        "Runtime": "python3.6"
      }
    },
    "SimonSaysCognitoIdentityPool": {
      "Type": "AWS::Cognito::IdentityPool",
      "Properties": {
        "IdentityPoolName": "SimonSaysIdentityPool",
        "AllowUnauthenticatedIdentities": true
      }
    },
    "SimonSaysCognitoUnAuthRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {"Ref": "SimonSaysCognitoIdentityPool"}
                },
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "unauthenticated"
                }
              }
            }
          ]
        },
        "Policies": [{
          "PolicyName": "SimonSaysCognitoUnauthPolicy",
          "PolicyDocument":{
          "Version": "2012-10-17",
          "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                    "mobileanalytics:PutEvents",
                    "cognito-sync:*"
                ],
                "Resource": [
                    "*"
                ]
              },
            {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:GetMetricStatistics",
                "cloudwatch:DescribeAlarms",
                "cloudwatch:DescribeAlarmsForMetric",
                "kms:DescribeKey",
                "kms:ListAliases",
                "lambda:GetPolicy",
                "lambda:ListFunctions",
                "lex:*",
                "polly:DescribeVoices",
                "polly:SynthesizeSpeech"
            ],
            "Resource": [
                "*"
            ]
          },
          {
              "Effect": "Allow",
              "Action": [
                  "lambda:AddPermission",
                  "lambda:RemovePermission"
              ],
              "Resource": "arn:aws:lambda:*:*:function:AmazonLex*",
              "Condition": {
                  "StringLike": {
                      "lambda:Principal": "lex.amazonaws.com"
                  }
              }
          },
          {
              "Effect": "Allow",
              "Action": [
                  "iam:GetRole",
                  "iam:DeleteRole"
              ],
              "Resource": [
                  "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                  "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
              ]
          },
          {
              "Effect": "Allow",
              "Action": [
                  "iam:CreateServiceLinkedRole"
              ],
              "Resource": [
                  "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
              ],
              "Condition": {
                  "StringLike": {
                      "iam:AWSServiceName": "lex.amazonaws.com"
                  }
              }
          },
          {
              "Effect": "Allow",
              "Action": [
                  "iam:DeleteServiceLinkedRole",
                  "iam:GetServiceLinkedRoleDeletionStatus"
              ],
              "Resource": [
                  "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
              ]
          },
          {
              "Effect": "Allow",
              "Action": [
                  "iam:DetachRolePolicy"
              ],
              "Resource": [
                  "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
              ],
              "Condition": {
                  "StringLike": {
                      "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/AmazonLexBotPolicy"
                  }
              }
          },
          {
              "Effect": "Allow",
              "Action": [
                  "iam:CreateServiceLinkedRole"
              ],
              "Resource": [
                  "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
              ],
              "Condition": {
                  "StringLike": {
                      "iam:AWSServiceName": "channels.lex.amazonaws.com"
                  }
              }
          },
          {
              "Effect": "Allow",
              "Action": [
                  "iam:DeleteServiceLinkedRole",
                  "iam:GetServiceLinkedRoleDeletionStatus"
              ],
              "Resource": [
                  "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
              ]
          },
          {
              "Effect": "Allow",
              "Action": [
                  "iam:DetachRolePolicy"
              ],
              "Resource": [
                  "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
              ],
              "Condition": {
                  "StringLike": {
                      "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/LexChannelPolicy"
                  }
              }
          }
          ]
          }
        }]
      }
    },
    "SimonSaysIdentityPoolRoleMapping": {
      "Type" : "AWS::Cognito::IdentityPoolRoleAttachment",
      "Properties" : {
        "IdentityPoolId" : {"Ref": "SimonSaysCognitoIdentityPool"},
        "Roles" : {
          "unauthenticated": {
          "Fn::GetAtt": [
            "SimonSaysCognitoUnAuthRole",
            "Arn"
          ]
          },
          "authenticated": {
          "Fn::GetAtt": [
            "SimonSaysCognitoUnAuthRole",
            "Arn"
          ]
          }
        }
      }
    },
    "SimonSaysCFNTemplatesTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "Id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "Id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 123,
          "WriteCapacityUnits": 123
        },
        "TableName": "SimonSaysCFNTemplates"
      }
    },
    "SimonSaysProjectsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "ProjectName",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "ProjectName",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 123,
          "WriteCapacityUnits": 123
        },
        "TableName": "SimonSaysProjects"
      }
    },
    "DatabaseInitializationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "RoleName": "DatabaseInitializationRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LambdaBasic",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                      "lambda:InvokeFunction"
                  ],
                  "Resource": "arn:aws:lambda:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                      "dynamodb:*"
                  ],
                  "Resource": "arn:aws:dynamodb:*:*:*"
                }
              ]
            }
          }
        ]
      }
    },
    "CallInitializeDatabaseFunction": {
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "InitializeTemplateDatabaseFunction",
            "Arn"
          ]
        },
        "TableName": {"Ref": "SimonSaysCFNTemplatesTable"}
      },
      "Type": "Custom::S3Objects",
      "DependsOn": "SimonSaysCFNTemplatesTable"
    },
    "InitializeTemplateDatabaseFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": { "Ref" : "Bucket"},
          "S3Key": "InitializeTemplateDB.zip"
        },
        "FunctionName": "InitializeTemplateDatabaseFunction",
        "Handler": "lambda_function.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "DatabaseInitializationRole",
            "Arn"
          ]
        },
        "Timeout": 60,
        "Runtime": "python3.6"
      }
    },
    "LexBotCreationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "",
            [
              "LexBotCreationRole-",
              "test"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "S3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AllowLogging",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "S3FullAccess",
                  "Effect": "Allow",
                  "Action": "s3:*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:GetMetricStatistics",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:DescribeAlarmsForMetric",
                    "kms:DescribeKey",
                    "kms:ListAliases",
                    "lambda:GetPolicy",
                    "lambda:ListFunctions",
                    "lambda:*",
                    "lex:*",
                    "polly:DescribeVoices",
                    "polly:SynthesizeSpeech"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:AddPermission",
                    "lambda:RemovePermission"
                  ],
                  "Resource": "arn:aws:lambda:*:*:function:AmazonLex*",
                  "Condition": {
                    "StringLike": {
                      "lambda:Principal": "lex.amazonaws.com"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:GetRole",
                    "iam:DeleteRole"
                  ],
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                    "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:CreateServiceLinkedRole"
                  ],
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
                  ],
                  "Condition": {
                    "StringLike": {
                      "iam:AWSServiceName": "lex.amazonaws.com"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:DeleteServiceLinkedRole",
                    "iam:GetServiceLinkedRoleDeletionStatus"
                  ],
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:DetachRolePolicy"
                  ],
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
                  ],
                  "Condition": {
                    "StringLike": {
                      "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/AmazonLexBotPolicy"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:CreateServiceLinkedRole"
                  ],
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
                  ],
                  "Condition": {
                    "StringLike": {
                      "iam:AWSServiceName": "channels.lex.amazonaws.com"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:DeleteServiceLinkedRole",
                    "iam:GetServiceLinkedRoleDeletionStatus"
                  ],
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:DetachRolePolicy"
                  ],
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
                  ],
                  "Condition": {
                    "StringLike": {
                      "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/LexChannelPolicy"
                    }
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "LexBotCreationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": { "Ref" : "Bucket"},
          "S3Key": "bot_importer.zip"
        },
        "FunctionName": "LexBotCreationLambdaFunction",
        "Handler": "lambda_function.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "LexBotCreationRole",
            "Arn"
          ]
        },
        "Timeout": 60,
        "Runtime": "python3.6"
      }
    },
    "CallLexBotCreationLambdaFunction": {
      "DependsOn": ["HelpFunctionPermission", "GreetFunctionPermission", "CreateFunctionPermission", "DeployFunctionPermission", "AddResourceFunctionPermission"],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LexBotCreationLambdaFunction",
            "Arn"
          ]
        },
        "LambdaARN": {
          "Fn::GetAtt": [
            "SimonSaysConversation",
            "Arn"
          ]
        },
        "BucketName": { "Ref" : "Bucket"},
        "ContentZipName": "SimonSaysLexBotExport.json",
        "LexBotName": "SimonSaysLexBot"
      },
      "Type": "Custom::S3Objects"
    },
    "LexARNReturnFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": { "Ref" : "Bucket"},
          "S3Key": "arn_lex_function.zip"
        },
        "FunctionName": "ARNLexReturner",
        "Handler": "lambda_function.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "LexBotCreationRole",
            "Arn"
          ]
        },
        "Timeout": 30,
        "Runtime": "python3.6"
      }
    },
    "CallARNReturnFunction": {
      "Type": "Custom::LexPermissionCaller",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LexARNReturnFunction",
            "Arn"
          ]
        },
        "FunctionArn": {
          "Fn::GetAtt" : [
            "LexARNReturnFunction",
            "Arn"
          ]
        }
      }
    },
    "HelpFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SimonSaysConversation",
            "Arn"
          ]
        },
        "Principal": "lex.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::GetAtt": [
                  "CallARNReturnFunction",
                  "ARN"
                ]
              },
              ":HelpFunction:*"
            ]
          ]
        }
      }
    },
    "GreetFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SimonSaysConversation",
            "Arn"
          ]
        },
        "Principal": "lex.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::GetAtt": [
                  "CallARNReturnFunction",
                  "ARN"
                ]
              },
              ":GreetUser:*"
            ]
          ]
        }
      }
    },
    "CreateFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SimonSaysConversation",
            "Arn"
          ]
        },
        "Principal": "lex.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::GetAtt": [
                  "CallARNReturnFunction",
                  "ARN"
                ]
              },
              ":CreateProject:*"
            ]
          ]
        }
      }
    },
    "AddResourceFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SimonSaysConversation",
            "Arn"
          ]
        },
        "Principal": "lex.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::GetAtt": [
                  "CallARNReturnFunction",
                  "ARN"
                ]
              },
              ":AddResources:*"
            ]
          ]
        }
      }
    },
    "DeployFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SimonSaysConversation",
            "Arn"
          ]
        },
        "Principal": "lex.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::GetAtt": [
                  "CallARNReturnFunction",
                  "ARN"
                ]
              },
              ":DeployProject:*"
            ]
          ]
        }
      }
    },
        "smsuser": {
      "Type": "AWS::IAM::User"
    },
    "smsgroup": {
      "Type": "AWS::IAM::Group"
    },
    "Users": {
      "Type": "AWS::IAM::UserToGroupAddition",
      "Properties": {
        "GroupName": {
          "Ref": "smsgroup"
        },
        "Users": [
          {
            "Ref": "smsuser"
          }
        ]
      }
    },
    "smspolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "smspolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sns:Publish",
                "sns:SetSMSAttributes"
              ],
              "Resource": "*"
            }
          ]
        },
        "Groups": [
          {
            "Ref": "smsgroup"
          }
        ]
      }
    },
    "smsaccesskey": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {
          "Ref": "smsuser"
        }
      }
    },
    "callSmsFunction": {
      "DependsOn": ["SMSFunction","smsaccesskey","SimonSaysCognitoIdentityPool"]
,      "Type": "Custom::SMSFunction",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SMSFunction",
            "Arn"
          ]
        },
        "CognitoPool": {
          "Ref": "SimonSaysCognitoIdentityPool"
        },
        "AccessKey": {
          "Ref": "smsaccesskey"
        },
        "SecretKey": {
          "Fn::GetAtt" : ["smsaccesskey", "SecretAccessKey"]
        },
        "PhoneNumber": {
          "Ref": "PhoneNumber"
        }
      }
    },
    "SMSFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Role": "arn:aws:iam::835483671006:role/SimonSaysLambdaRole",
        "FunctionName": "SMSFunction",
        "Description": "Sends an sms containing an CognitoPoolId",
        "Handler": "index.handler",
        "Runtime": "python3.6",
        "Timeout": 120,
        "Code": {
          "S3Bucket": { "Ref" : "Bucket"},
          "S3Key": "sms_function.zip"
        }
      }
    }
  },
  "Outputs": {
    "IdentityPoolId" : {
      "Description" : "Identity Pool ID to get access to lex bot",
      "Value" : {"Ref": "SimonSaysCognitoIdentityPool"}
    }
  }
}
