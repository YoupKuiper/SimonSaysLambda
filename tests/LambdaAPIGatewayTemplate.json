{
  "YoupTestStackLambdaHelloWorldNode": {
    "Type": "AWS::Lambda::Function",
    "Properties": {
      "Code": {
        "S3Bucket": "helloworldnodelambda",
        "S3Key": "index.js.zip"
      },
      "Description": "HTML returning Lambda function",
      "FunctionName": {
        "Fn::Join": [
          "",
          [
            {
              "Ref": "ProjectName"
            },
            "LambdaFunction"
          ]
        ]
      },
      "Handler": "index.handler",
      "Role": {
        "Fn::GetAtt": [
          "LambdaExecutionRole",
          "Arn"
        ]
      },
      "Runtime": "nodejs8.10"
    }
  },
  "LambdaExecutionRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "lambda.amazonaws.com"
              ]
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }
        ]
      },
      "ManagedPolicyArns": [
        "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      ]
    }
  },
  "YoupTestStackAPIGateway": {
    "Type": "AWS::ApiGateway::RestApi",
    "Properties": {
      "Name": {
        "Fn::Join": [
          "",
          [
            {
              "Ref": "ProjectName"
            },
            "APIGateway"
          ]
        ]
      },
      "Description": "API Gateway to support NodeJS Lambda that returns HTML",
      "FailOnWarnings": true
    }
  },
  "LambdaPermission": {
    "Type": "AWS::Lambda::Permission",
    "Properties": {
      "Action": "lambda:invokeFunction",
      "FunctionName": {
        "Fn::GetAtt": [
          "YoupTestStackLambdaHelloWorldNode",
          "Arn"
        ]
      },
      "Principal": "apigateway.amazonaws.com",
      "SourceArn": {
        "Fn::Join": [
          "",
          [
            "arn:aws:execute-api:",
            {
              "Ref": "AWS::Region"
            },
            ":",
            {
              "Ref": "AWS::AccountId"
            },
            ":",
            {
              "Ref": "YoupTestStackAPIGateway"
            },
            "/*"
          ]
        ]
      }
    }
  },
  "ApiGatewayCloudWatchLogsRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "apigateway.amazonaws.com"
              ]
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }
        ]
      },
      "Policies": [
        {
          "PolicyName": "ApiGatewayLogsPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:DescribeLogGroups",
                  "logs:DescribeLogStreams",
                  "logs:PutLogEvents",
                  "logs:GetLogEvents",
                  "logs:FilterLogEvents"
                ],
                "Resource": "*"
              }
            ]
          }
        }
      ]
    }
  },
  "ApiGatewayAccount": {
    "Type": "AWS::ApiGateway::Account",
    "Properties": {
      "CloudWatchRoleArn": {
        "Fn::GetAtt": [
          "ApiGatewayCloudWatchLogsRole",
          "Arn"
        ]
      }
    }
  },
  "YoupTestStackAPIGatewayStage": {
    "DependsOn": [
      "ApiGatewayAccount"
    ],
    "Type": "AWS::ApiGateway::Stage",
    "Properties": {
      "DeploymentId": {
        "Ref": "YoupTestStackAPIGatewayDeployment"
      },
      "MethodSettings": [
        {
          "DataTraceEnabled": true,
          "HttpMethod": "*",
          "LoggingLevel": "INFO",
          "ResourcePath": "/*"
        }
      ],
      "RestApiId": {
        "Ref": "YoupTestStackAPIGateway"
      },
      "StageName": "LATEST"
    }
  },
  "YoupTestStackAPIGatewayDeployment": {
    "Type": "AWS::ApiGateway::Deployment",
    "DependsOn": [
      "YoupTestStackAPIGatewayMethod"
    ],
    "Properties": {
      "RestApiId": {
        "Ref": "YoupTestStackAPIGateway"
      },
      "StageName": "DummyStage"
    }
  },
  "YoupTestStackAPIGatewayMethod": {
    "DependsOn": "LambdaPermission",
    "Type": "AWS::ApiGateway::Method",
    "Properties": {
      "AuthorizationType": "NONE",
      "HttpMethod": "GET",
      "Integration": {
        "Type": "AWS",
        "PassthroughBehavior": "WHEN_NO_MATCH",
        "IntegrationHttpMethod": "POST",
        "Uri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "YoupTestStackLambdaHelloWorldNode",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "IntegrationResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Content-Type": "'text/html'"
            },
            "ResponseTemplates": {
              "text/html": "$input.path('$')"
            },
            "StatusCode": "200"
          }
        ]
      },
      "RequestParameters": {
        "method.request.querystring.name": false
      },
      "ResourceId": {
        "Fn::GetAtt": [
          "YoupTestStackAPIGateway",
          "RootResourceId"
        ]
      },
      "RestApiId": {
        "Ref": "YoupTestStackAPIGateway"
      },
      "MethodResponses": [
        {
          "ResponseParameters": {
            "method.response.header.Content-Type": false
          },
          "StatusCode": "200"
        }
      ]
    }
  }
}

