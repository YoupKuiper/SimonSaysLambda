{
  "Parameters": {
    "ProjectName": {
      "Type": "String",
      "Default": "TestProject"
    }
  },
  "Resources": {
    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Simple Lambda function",
        "Code": {
          "ZipFile" :
          "import json\n
          def lambda_handler(event, context):\n
          \tmessage = 'Hello {}!'.format(event[\"queryStringParameters\"][\"name\"])\n
          \treturn {\n
          \t\t'statusCode': 200,\n
          \t\t'body': json.dumps(message, sort_keys=True, indent=4, separators=(',', ': '))\n
          \t}
          "
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ProjectName"
              },
              "-LambdaFunction"
            ]
          ]
        },
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Ref": "APITesterSG"
            }
          ],
          "SubnetIds": [{
            "Fn::ImportValue": "Demo-privateSubnet01"
          }]
        }
      }
    },
    "APIGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ProjectName"
              },
              "-Gateway"
            ]
          ]
        },
        "Parameters": {
          "EndpointConfiguration": "REGIONAL"
        },
        "Description": "API Gateway to support NodeJS Lambda",
        "FailOnWarnings": true
      }
    },
    "APIGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiGatewayLogsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "APIGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "APIGatewayCloudWatchLogsRole",
            "Arn"
          ]
        }
      }
    },
    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunction",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "APIGateway"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "APIGatewayStage": {
      "DependsOn": [
        "APIGatewayAccount"
      ],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "LATEST",
        "Description": "Stage for demo",
        "RestApiId": {
          "Ref": "APIGateway"
        },
        "DeploymentId": {
          "Ref": "APIGatewayDeployment"
        },
        "MethodSettings": [
          {
            "ResourcePath": "/",
            "HttpMethod": "GET",
            "MetricsEnabled": "true",
            "DataTraceEnabled": "true"
          }
        ]
      }
    },
    "APIGatewayMethod": {
      "DependsOn": "LambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "ResourceId": {
          "Fn::GetAtt": [
            "APIGateway",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "APIGateway"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS_PROXY",
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
        },
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ]
      }
    },
    "APIGatewayDeployment": {
      "DependsOn": "APIGatewayMethod",
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "APIGateway"
        },
        "Description": "Deployment",
        "StageName": "demo"
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        ]
      }
    },
    "APITesterSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Fn::ImportValue": "Demo-MyVPC"
        },
        "GroupDescription": "SG for Lambda function",
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ],
      }
    }
  }
}
