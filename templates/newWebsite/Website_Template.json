{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates a static website using S3 for the serverless web application demo",
  "Parameters": {
    "ProjectName": {
      "Type": "String",
      "Default": "testproject"
    },
    "CodeBucket": {
      "Type": "String",
      "Default": "simonsayshelloworldbucket",
      "Description": "S3 bucket containing the code deployed by this template"
    }
  },
  "Resources": {
    "WebsiteBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ProjectName"
              },
              ".mirademo.com"
            ]
          ]
        },
        "WebsiteConfiguration": {
          "IndexDocument": "index.html"
        }
      }
    },
    "WebsiteBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ProjectName"
              },
              ".mirademo.com"
            ]
          ]
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "WebsiteBucket",
                        "Arn"
                      ]
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        }
      },
      "DependsOn": [
        "WebsiteBucket"
      ]
    },
    "S3CopyRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "S3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AllowLogging",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "SourceBucketReadAccess",
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket",
                    "s3:GetObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${CodeBucket}"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${CodeBucket}/*"
                    }
                  ]
                },
                {
                  "Sid": "DestBucketWriteAccess",
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:PutObjectVersionAcl",
                    "s3:CopyObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${WebsiteBucket}"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${WebsiteBucket}/*"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CopyS3ObjectsFunction": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "S3CopyRole"
      ],
      "Properties": {
        "Description": "Copies objects from a source S3 bucket to a destination",
        "Handler": "index.handler",
        "Runtime": "python2.7",
        "Role": {
          "Fn::GetAtt": [
            "S3CopyRole",
            "Arn"
          ]
        },
        "Timeout": 120,
        "Code": {
          "S3Bucket": "awscodepipelinetestbucketcf",
          "S3Key": "CopyS3ObjectsFunction.zip"
        }
      }
    },
    "WebsiteContent": {
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CopyS3ObjectsFunction",
            "Arn"
          ]
        },
        "SourceBucket": {
          "Ref": "CodeBucket"
        },
        "Bucket": {
          "Ref": "WebsiteBucket"
        },
        "APIUrl": {
          "Fn::Join": [
            "",
            [
              "var _config = {api: {invokeUrl: ",
              {
                "Fn::Join": [
                  "",
                  [
                    "\"https://",
                    {
                      "Ref": "ProjectName"
                    },
                    ".api.mirademo.com\""
                  ]
                ]
              },
              "}};"
            ]
          ]
        }
      },
      "Type": "Custom::S3Objects"
    },
    "APIGateway": {
      "Properties": {
        "Description": "API Gateway to support NodeJS Lambda",
        "FailOnWarnings": true,
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ProjectName"
              },
              "-Gateway"
            ]
          ]
        },
        "Parameters": {
          "EndpointConfiguration": "REGIONAL"
        }
      },
      "Type": "AWS::ApiGateway::RestApi"
    },
    "APIGatewayAccount": {
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "APIGatewayCloudWatchLogsRole",
            "Arn"
          ]
        }
      },
      "Type": "AWS::ApiGateway::Account"
    },
    "APIGatewayCloudWatchLogsRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "ApiGatewayLogsPolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "APIGatewayDeployment": {
      "DependsOn": "GETMethod",
      "Properties": {
        "Description": "Deployment",
        "RestApiId": {
          "Ref": "APIGateway"
        },
        "StageName": "LATEST"
      },
      "Type": "AWS::ApiGateway::Deployment"
    },
    "APIGatewayDomain": {
      "Type": "AWS::ApiGateway::DomainName",
      "Properties": {
        "RegionalCertificateArn": "arn:aws:acm:eu-west-1:835483671006:certificate/314f7b22-5b16-4e49-8966-6405464721b3",
        "DomainName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ProjectName"
              },
              ".",
              "api",
              ".",
              "mirademo",
              ".",
              "com"
            ]
          ]
        },
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL"
          ]
        }
      }
    },
    "APIGatewayDomainMapping": {
      "DependsOn": "APIGatewayDeployment",
      "Type": "AWS::ApiGateway::BasePathMapping",
      "Properties": {
        "BasePath": "",
        "DomainName": {
          "Ref": "APIGatewayDomain"
        },
        "RestApiId": {
          "Ref": "APIGateway"
        },
        "Stage": "LATEST"
      }
    },
    "GETMethod": {
      "DependsOn": "LambdaPermission",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "ResourceId": {
          "Fn::GetAtt": [
            "APIGateway",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "APIGateway"
        }
      },
      "Type": "AWS::ApiGateway::Method"
    },
    "OPTIONSMethod": {
      "DependsOn": "LambdaPermission",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationHttpMethod": "OPTIONS",
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Methods": "'GET, OPTIONS'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              },
              "ResponseTemplates": {
                "application/json": ""
              },
              "StatusCode": "200"
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Headers": false
            }
          }
        ],
        "ResourceId": {
          "Fn::GetAtt": [
            "APIGateway",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "APIGateway"
        }
      },
      "Type": "AWS::ApiGateway::Method"
    },
    "APITesterSG": {
      "Properties": {
        "GroupDescription": "SG for Lambda function",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "IpProtocol": "tcp",
            "ToPort": "65535"
          }
        ],
        "VpcId": {
          "Fn::ImportValue": {"Fn::Join": ["",[ {"Ref" : "ProjectName"}, "-MyVPC"]]}
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "LambdaExecutionRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "LambdaFunction": {
      "Properties": {
        "Code": "./",
        "Description": "Simple Lambda function",
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ProjectName"
              },
              "-LambdaFunction"
            ]
          ]
        },
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Ref": "APITesterSG"
            }
          ],
          "SubnetIds": [
            {
              "Fn::ImportValue": {"Fn::Join": ["",[ {"Ref" : "ProjectName"}, "-publicSubnet01"]]}
            },
            {
              "Fn::ImportValue": {"Fn::Join": ["",[ {"Ref" : "ProjectName"}, "-publicSubnet02"]]}
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Function"
    },
    "LambdaPermission": {
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunction",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "APIGateway"
              },
              "/*"
            ]
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "DNSForAPI": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": "mirademo.com.",
        "Comment": "DNS name for my instance.",
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ProjectName"
              },
              ".",
              "api",
              ".",
              "mirademo",
              ".",
              "com",
              "."
            ]
          ]
        },
        "Type": "A",
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "APIGatewayDomain",
              "RegionalDomainName"
            ]
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "APIGatewayDomain",
              "RegionalHostedZoneId"
            ]
          }
        }
      }
    },
    "myDNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
         "HostedZoneName" : "mirademo.com.",
         "Comment" : "DNS name for my instance.",
         "Name" : {
            "Fn::Join" : [ "", [
               {"Ref" : "ProjectName"}, ".",
               "mirademo", ".",
               "com" ,"."
            ] ]
         },
         "Type" : "A",
         "AliasTarget" : {
           "DNSName": "s3-website-eu-west-1.amazonaws.com",
           "HostedZoneId": "Z1BKCTXD74EZPE"
         }
      }
    },
    "WebsiteDynamoDBTable": {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [ {"AttributeName": "Key", "AttributeType": "S"} ],
        "KeySchema" : [ {"AttributeName": "Key", "KeyType": "HASH"} ],
        "ProvisionedThroughput" : {"ReadCapacityUnits": 5, "WriteCapacityUnits": 5},
        "TableName" : {"Fn::Join": ["",[{"Ref": "ProjectName"}, "Table"]]}
      }
    },
    "TableContent": {
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "FillTableWithWebsiteContentFunction",
            "Arn"
          ]
        },
        "TableName": {"Fn::Join": ["", [{"Ref": "ProjectName"}, "Table"]]},
        "ProjectName": {"Ref": "ProjectName"}
      },
      "DependsOn": [
        "WebsiteDynamoDBTable",
        "FillTableWithWebsiteContentFunction"
      ],
      "Type": "Custom::S3Objects"
    },
    "FillTableWithWebsiteContentFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Puts website content in dynamodb table",
        "Handler": "index.lambda_handler",
        "Runtime": "python3.6",
        "Role": "arn:aws:iam::835483671006:role/lambda_basic_execution",
        "Timeout": 120,
        "Code": {
          "S3Bucket": "awscodepipelinetestbucketcf",
          "S3Key": "websitedatabasecontentfunction.zip"
        }
      }
    }
  },
  "Outputs": {
    "WebsiteURL": {
      "Value": {
        "Fn::GetAtt": [
          "WebsiteBucket",
          "WebsiteURL"
        ]
      }
    }
  }
}
